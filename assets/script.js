import { dishes } from './dishes.js';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥
let selectedSoup = null;
let selectedMain = null;
let selectedDrink = null;
let selectedSalad = null;
let selectedDessert = null;

const currentFilters = {
  soup: 'all',
  main: 'all',
  drink: 'all',
  salad: 'all',
  dessert: 'all'
};

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const notificationStyles = `
.notification {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  z-index: 1000;
  text-align: center;
  min-width: 300px;
}

.notification button {
  margin-top: 15px;
  padding: 8px 20px;
  background: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.notification button:hover {
  background: white;
  color: #4CAF50;
  border: 1px solid #4CAF50;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  z-index: 999;
}`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const styleSheet = document.createElement('style');
styleSheet.textContent = notificationStyles;
document.head.appendChild(styleSheet);

function calculateTotalPrice() {
  return (
    (selectedSoup?.price || 0) +
    (selectedMain?.price || 0) +
    (selectedDrink?.price || 0) +
    (selectedSalad?.price || 0) +
    (selectedDessert?.price || 0)
  );
}

function updateOrderVisibility() {
  const orderSummary = document.getElementById('order-summary');
  const hasAnySelection = selectedSoup || selectedMain || selectedDrink || selectedSalad || selectedDessert;

  if (!hasAnySelection) {
    orderSummary.innerHTML = '<p><b>–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</b></p>';
    return;
  }

  const totalPrice = calculateTotalPrice();
  orderSummary.innerHTML = `
    <p><b>–°—É–ø</b></p>
    <p>${selectedSoup ? selectedSoup.name + ' - ' + selectedSoup.price + '‚ÇΩ' : '–°—É–ø –Ω–µ –≤—ã–±—Ä–∞–Ω'}</p>
    
    <p><b>–ì–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ</b></p>
    <p>${selectedMain ? selectedMain.name + ' - ' + selectedMain.price + '‚ÇΩ' : '–ë–ª—é–¥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}</p>
    
    <p><b>–ù–∞–ø–∏—Ç–æ–∫</b></p>
    <p>${selectedDrink ? selectedDrink.name + ' - ' + selectedDrink.price + '‚ÇΩ' : '–ù–∞–ø–∏—Ç–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω'}</p>
    
    <p><b>–°–∞–ª–∞—Ç –∏–ª–∏ —Å—Ç–∞—Ä—Ç–µ—Ä</b></p>
    <p>${selectedSalad ? selectedSalad.name + ' - ' + selectedSalad.price + '‚ÇΩ' : '–°–∞–ª–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω'}</p>
    
    <p><b>–î–µ—Å–µ—Ä—Ç</b></p>
    <p>${selectedDessert ? selectedDessert.name + ' - ' + selectedDessert.price + '‚ÇΩ' : '–î–µ—Å–µ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω'}</p>
    
    <p><b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞</b></p>
    <p><span id="order-price">${totalPrice}‚ÇΩ</span></p>
  `;
}

function addToOrder(dishKeyword) {
  const dish = dishes.find(d => d.keyword === dishKeyword);
  if (!dish) return;

  switch (dish.category) {
    case 'soup':
      selectedSoup = dish;
      break;
    case 'main':
      selectedMain = dish;
      break;
    case 'drink':
      selectedDrink = dish;
      break;
    case 'salad':
      selectedSalad = dish;
      break;
    case 'dessert':
      selectedDessert = dish;
      break;
  }

  updateOrderVisibility();
}

function resetOrder() {
  selectedSoup = null;
  selectedMain = null;
  selectedDrink = null;
  selectedSalad = null;
  selectedDessert = null;

  updateOrderVisibility();
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–º–±–æ
function validateCombo() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ
  const hasAnySelection = selectedSoup || selectedMain || selectedDrink ||
    selectedSalad || selectedDessert;

  if (!hasAnySelection) {
    return "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞";
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∞
  const hasDrink = selectedDrink !== null;
  if (!hasDrink && (selectedMain || selectedSoup || selectedSalad)) {
    return "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫";
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å —Å—É–ø–æ–º
  if (selectedSoup && !selectedMain && !selectedSalad) {
    return "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ/—Å–∞–ª–∞—Ç/—Å—Ç–∞—Ä—Ç–µ—Ä";
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å —Å–∞–ª–∞—Ç–æ–º
  if (selectedSalad && !selectedSoup && !selectedMain) {
    return "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–ø –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ";
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  if ((selectedDrink || selectedDessert) && !selectedMain) {
    return "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ";
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
  const validCombinations = [
    // –ö–æ–º–±–æ 1: –°—É–ø + –ì–ª–∞–≤–Ω–æ–µ + –°–∞–ª–∞—Ç + –ù–∞–ø–∏—Ç–æ–∫
    selectedSoup && selectedMain && selectedSalad && selectedDrink,
    // –ö–æ–º–±–æ 2: –°—É–ø + –ì–ª–∞–≤–Ω–æ–µ + –ù–∞–ø–∏—Ç–æ–∫
    selectedSoup && selectedMain && selectedDrink && !selectedSalad,
    // –ö–æ–º–±–æ 3: –°—É–ø + –°–∞–ª–∞—Ç + –ù–∞–ø–∏—Ç–æ–∫
    selectedSoup && selectedSalad && selectedDrink && !selectedMain,
    // –ö–æ–º–±–æ 4: –ì–ª–∞–≤–Ω–æ–µ + –°–∞–ª–∞—Ç + –ù–∞–ø–∏—Ç–æ–∫
    selectedMain && selectedSalad && selectedDrink && !selectedSoup,
    // –ö–æ–º–±–æ 5: –ì–ª–∞–≤–Ω–æ–µ + –ù–∞–ø–∏—Ç–æ–∫
    selectedMain && selectedDrink && !selectedSoup && !selectedSalad
  ];

  return validCombinations.some(combo => combo) ? "" : "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –±–ª—é–¥";
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
  const overlay = document.createElement('div');
  overlay.className = 'overlay';

  const notification = document.createElement('div');
  notification.className = 'notification';

  notification.innerHTML = `
    <p>${message}</p>
    <button>–û–∫–µ–πüëå</button>
  `;

  const button = notification.querySelector('button');
  button.addEventListener('click', () => {
    overlay.remove();
    notification.remove();
  });

  document.body.appendChild(overlay);
  document.body.appendChild(notification);
}

function displayDishes(category, kind) {
  const container = document.getElementById(`${category}-list`);
  container.innerHTML = '';

  if (currentFilters[category] === kind) {
    currentFilters[category] = 'all';
  } else {
    currentFilters[category] = kind;
  }

  let filteredDishes = dishes.filter(dish => dish.category === category)
    .filter(dish => currentFilters[category] === 'all' || dish.kind === currentFilters[category]);

  filteredDishes = sortDishesAlphabetically(filteredDishes);

  filteredDishes.forEach(dish => {
    const dishBlock = document.createElement('div');
    dishBlock.classList.add('dish-block');
    dishBlock.innerHTML = `
      <img src="${dish.image}" alt="${dish.name}">
      <h3>${dish.name}</h3>
      <p class="price">${dish.price}‚ÇΩ</p>
      <p class="weight">${dish.count}</p>
      <button data-dish="${dish.keyword}" onclick="addToOrder('${dish.keyword}')">–î–æ–±–∞–≤–∏—Ç—å</button>
    `;
    container.appendChild(dishBlock);
  });

  updateFilterButtons(category);
}

function updateFilterButtons(category) {
  const filterButtons = document.querySelectorAll(`#filters-${category} .filter-btn`);
  filterButtons.forEach(button => {
    if (button.dataset.kind === currentFilters[category]) {
      button.classList.add('active');
    } else {
      button.classList.remove('active');
    }
  });
}

function sortDishesAlphabetically(dishes) {
  return dishes.sort((a, b) => a.name.localeCompare(b.name));
}

function initializePage() {
  displayDishes('soup', 'all');
  displayDishes('main', 'all');
  displayDishes('drink', 'all');
  displayDishes('salad', 'all');
  displayDishes('dessert', 'all');

  const filterButtons = document.querySelectorAll('.filter-btn');
  filterButtons.forEach(button => {
    button.addEventListener('click', function () {
      const category = this.closest('section').id.replace('filters-', '');
      const kind = this.dataset.kind;
      displayDishes(category, kind);
    });
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  document.querySelector('form.custom-detail').addEventListener('submit', function (event) {
    event.preventDefault();
    const validationMessage = validateCombo();

    if (validationMessage) {
      showNotification(validationMessage);
    } else {
      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ä–º—É
      // this.submit();
      console.log('–§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å');
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –∑–∞–∫–∞–∑–∞
  document.getElementById('resetOrderButton').addEventListener('click', resetOrder);

  updateOrderVisibility();
}

window.onload = initializePage;
window.displayDishes = displayDishes;
window.addToOrder = addToOrder;
window.resetOrder = resetOrder;